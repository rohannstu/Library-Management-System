{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import axios from'axios';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{// Check if user is already logged in\nconst token=localStorage.getItem('token');if(token){// Set the default Authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;// Get user info if token exists\nfetchCurrentUser();}else{setLoading(false);}},[]);const fetchCurrentUser=async()=>{try{// Get user info from the backend\nconst response=await authAPI.getCurrentUser();console.log('Current user data from API:',response.data);setCurrentUser(response.data);setError(null);}catch(err){console.error('Error fetching current user:',err);setError('Failed to fetch user information. Using mock data instead.');// Try to get mock user data\ntry{const members=JSON.parse(localStorage.getItem('members'))||[];const adminUser=members.find(m=>m.role==='ADMIN');if(adminUser){console.log('Using mock admin user:',adminUser);setCurrentUser(adminUser);}else{// Clear token if no mock user found\nlocalStorage.removeItem('token');delete axios.defaults.headers.common['Authorization'];}}catch(mockErr){console.error('Error getting mock user:',mockErr);// Clear token if it's invalid\nlocalStorage.removeItem('token');delete axios.defaults.headers.common['Authorization'];}}finally{setLoading(false);}};const login=async(email,password)=>{try{setLoading(true);setError(null);const response=await authAPI.login({email,password});const{accessToken,user}=response.data;// Save token to localStorage\nlocalStorage.setItem('token',accessToken);// Set the default Authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${accessToken}`;// Set current user directly from response if available\nif(user){setCurrentUser(user);}else{// Fetch current user info if user not included in response\nawait fetchCurrentUser();}return true;}catch(err){console.error('Login error:',err);setError(err.message||'Failed to login. Please check your credentials.');return false;}finally{setLoading(false);}};const register=async userData=>{try{setLoading(true);setError(null);await authAPI.register(userData);// After successful registration, redirect to login page\n// The user will need to log in with their credentials\nreturn true;}catch(err){console.error('Registration error:',err);setError(err.message||'Failed to register. Please try again.');return false;}finally{setLoading(false);}};const logout=()=>{// Remove token from localStorage\nlocalStorage.removeItem('token');// Remove Authorization header\ndelete axios.defaults.headers.common['Authorization'];// Clear user state\nsetCurrentUser(null);setError(null);};const isAdmin=()=>{console.log('isAdmin check - currentUser:',currentUser);const result=currentUser&&currentUser.role==='ADMIN';console.log('isAdmin result:',result);return result;};const value={currentUser,loading,error,login,register,logout,isAdmin};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","authAPI","jsx","_jsx","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","token","localStorage","getItem","defaults","headers","common","fetchCurrentUser","response","getCurrentUser","console","log","data","err","members","JSON","parse","adminUser","find","m","role","removeItem","mockErr","login","email","password","accessToken","user","setItem","message","register","userData","logout","isAdmin","result","value","Provider"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { authAPI } from '../services/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Get user info if token exists\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchCurrentUser = async () => {\n    try {\n      // Get user info from the backend\n      const response = await authAPI.getCurrentUser();\n      console.log('Current user data from API:', response.data);\n      setCurrentUser(response.data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching current user:', err);\n      setError('Failed to fetch user information. Using mock data instead.');\n      \n      // Try to get mock user data\n      try {\n        const members = JSON.parse(localStorage.getItem('members')) || [];\n        const adminUser = members.find(m => m.role === 'ADMIN');\n        \n        if (adminUser) {\n          console.log('Using mock admin user:', adminUser);\n          setCurrentUser(adminUser);\n        } else {\n          // Clear token if no mock user found\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      } catch (mockErr) {\n        console.error('Error getting mock user:', mockErr);\n        // Clear token if it's invalid\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authAPI.login({ email, password });\n      const { accessToken, user } = response.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', accessToken);\n      \n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n      \n      // Set current user directly from response if available\n      if (user) {\n        setCurrentUser(user);\n      } else {\n        // Fetch current user info if user not included in response\n        await fetchCurrentUser();\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message || 'Failed to login. Please check your credentials.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await authAPI.register(userData);\n      \n      // After successful registration, redirect to login page\n      // The user will need to log in with their credentials\n      return true;\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err.message || 'Failed to register. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n    \n    // Clear user state\n    setCurrentUser(null);\n    setError(null);\n  };\n\n  const isAdmin = () => {\n    console.log('isAdmin check - currentUser:', currentUser);\n    const result = currentUser && currentUser.role === 'ADMIN';\n    console.log('isAdmin result:', result);\n    return result;\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}