{"ast":null,"code":"import axios from 'axios';\n\n// Mock data for initial state\nconst initialMockData = {\n  books: [{\n    id: 1,\n    title: 'The Great Gatsby',\n    author: 'F. Scott Fitzgerald',\n    isbn: '9780743273565',\n    publisher: 'Scribner',\n    publicationYear: 1925,\n    quantity: 5,\n    availableQuantity: 3\n  }, {\n    id: 2,\n    title: 'To Kill a Mockingbird',\n    author: 'Harper Lee',\n    isbn: '9780061120084',\n    publisher: 'HarperCollins',\n    publicationYear: 1960,\n    quantity: 8,\n    availableQuantity: 6\n  }, {\n    id: 3,\n    title: '1984',\n    author: 'George Orwell',\n    isbn: '9780451524935',\n    publisher: 'Signet Classic',\n    publicationYear: 1949,\n    quantity: 10,\n    availableQuantity: 7\n  }],\n  members: [{\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com',\n    phoneNumber: '1234567890',\n    address: '123 Main St',\n    role: 'USER',\n    active: true,\n    membershipStartDate: '2023-01-01',\n    membershipEndDate: '2024-01-01',\n    maxAllowedBooks: 5,\n    maxAllowedDays: 14\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    phoneNumber: '0987654321',\n    address: '456 Oak Ave',\n    role: 'USER',\n    active: true,\n    membershipStartDate: '2023-02-15',\n    membershipEndDate: '2024-02-15',\n    maxAllowedBooks: 3,\n    maxAllowedDays: 10\n  }, {\n    id: 3,\n    name: 'Admin User',\n    email: 'admin@example.com',\n    phoneNumber: '5555555555',\n    address: '789 Admin Blvd',\n    role: 'ADMIN',\n    active: true,\n    membershipStartDate: '2023-01-01',\n    membershipEndDate: '2025-01-01',\n    maxAllowedBooks: 10,\n    maxAllowedDays: 30\n  }],\n  borrowings: [{\n    id: 1,\n    bookId: 1,\n    memberId: 1,\n    borrowDate: '2023-05-01',\n    dueDate: '2023-05-15',\n    returned: false,\n    bookTitle: 'The Great Gatsby',\n    memberName: 'John Doe'\n  }, {\n    id: 2,\n    bookId: 2,\n    memberId: 2,\n    borrowDate: '2023-04-15',\n    dueDate: '2023-04-25',\n    returned: true,\n    returnDate: '2023-04-23',\n    fineAmount: 0,\n    bookTitle: 'To Kill a Mockingbird',\n    memberName: 'Jane Smith'\n  }, {\n    id: 3,\n    bookId: 3,\n    memberId: 1,\n    borrowDate: '2023-05-10',\n    dueDate: '2023-05-24',\n    returned: false,\n    bookTitle: '1984',\n    memberName: 'John Doe'\n  }]\n};\n\n// Initialize localStorage with mock data if it doesn't exist\nconst initializeMockData = () => {\n  if (!localStorage.getItem('books')) {\n    localStorage.setItem('books', JSON.stringify(initialMockData.books));\n  }\n  if (!localStorage.getItem('members')) {\n    localStorage.setItem('members', JSON.stringify(initialMockData.members));\n  }\n  if (!localStorage.getItem('borrowings')) {\n    localStorage.setItem('borrowings', JSON.stringify(initialMockData.borrowings));\n  }\n};\n\n// Initialize mock data\ninitializeMockData();\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8081/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000 // Increase timeout to 5 seconds\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    // Clear token and redirect to login\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to load mock data from localStorage\nconst loadMockData = key => {\n  try {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error(`Error loading mock ${key}:`, error);\n    return null;\n  }\n};\n\n// Helper function to save mock data to localStorage\nconst saveMockData = (key, data) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n    console.log(`Saved ${key} to localStorage:`, data);\n  } catch (error) {\n    console.error(`Error saving mock ${key}:`, error);\n  }\n};\n\n// Helper function to handle API fallback to mock data\nconst withMockFallback = async (apiCall, mockDataKey) => {\n  try {\n    const response = await apiCall();\n    return response;\n  } catch (error) {\n    console.warn(`API call failed, using mock data for ${mockDataKey}:`, error);\n    const mockData = loadMockData(mockDataKey);\n    if (!mockData) {\n      throw new Error(`No mock data available for ${mockDataKey}`);\n    }\n    return {\n      data: mockData\n    };\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response;\n    } catch (error) {\n      console.warn('Login failed, using mock authentication:', error);\n\n      // Check against mock users\n      const members = loadMockData('members');\n      const user = members.find(m => m.email === credentials.email);\n      if (user) {\n        // Mock successful login\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        localStorage.setItem('token', mockToken);\n        return {\n          data: {\n            accessToken: mockToken,\n            user: user\n          }\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/signup', userData);\n      return response;\n    } catch (error) {\n      console.warn('Registration failed, using mock registration:', error);\n\n      // Add to mock members\n      const members = loadMockData('members');\n      const newUser = {\n        id: members.length + 1,\n        ...userData,\n        role: 'USER',\n        active: true,\n        membershipStartDate: new Date().toISOString().split('T')[0],\n        membershipEndDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        maxAllowedBooks: 5,\n        maxAllowedDays: 14\n      };\n      members.push(newUser);\n      saveMockData('members', members);\n      return {\n        data: newUser\n      };\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response;\n    } catch (error) {\n      console.warn('Get current user failed, using mock user:', error);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      // Return the admin user as the current user\n      const members = loadMockData('members');\n      const adminUser = members.find(m => m.role === 'ADMIN');\n      if (adminUser) {\n        return {\n          data: adminUser\n        };\n      } else {\n        throw new Error('No admin user found in mock data');\n      }\n    }\n  }\n};\n\n// Books API\nexport const booksAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/books');\n      // Update localStorage with the latest data from the server\n      saveMockData('books', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for books:`, error);\n      const mockData = loadMockData('books');\n      if (!mockData) {\n        throw new Error(`No mock data available for books`);\n      }\n      return {\n        data: mockData\n      };\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get book by ID failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const book = books.find(b => b.id === parseInt(id));\n      if (!book) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      return {\n        data: book\n      };\n    }\n  },\n  create: async bookData => {\n    try {\n      const response = await api.post('/books', bookData);\n\n      // Update localStorage with the new book\n      const books = loadMockData('books') || [];\n      books.push(response.data);\n      saveMockData('books', books);\n      return response.data;\n    } catch (error) {\n      console.warn('Create book failed, using mock data:', error);\n      const books = loadMockData('books') || [];\n      const newBook = {\n        id: books.length > 0 ? Math.max(...books.map(b => b.id)) + 1 : 1,\n        ...bookData,\n        availableQuantity: bookData.quantity\n      };\n      books.push(newBook);\n      saveMockData('books', books);\n      return newBook;\n    }\n  },\n  update: async (id, bookData) => {\n    try {\n      const response = await api.put(`/books/${id}`, bookData);\n      return response.data;\n    } catch (error) {\n      console.warn(`Update book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const index = books.findIndex(b => b.id === parseInt(id));\n      if (index === -1) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      books[index] = {\n        ...books[index],\n        ...bookData\n      };\n      saveMockData('books', books);\n      return books[index];\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/books/${id}`);\n      return response.data;\n    } catch (error) {\n      console.warn(`Delete book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const filteredBooks = books.filter(b => b.id !== parseInt(id));\n      saveMockData('books', filteredBooks);\n      return {\n        message: 'Book deleted successfully'\n      };\n    }\n  }\n};\n\n// Members API\nexport const membersAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/members');\n      // Update localStorage with the latest data from the server\n      saveMockData('members', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for members:`, error);\n      const mockData = loadMockData('members');\n      if (!mockData) {\n        throw new Error(`No mock data available for members`);\n      }\n      return {\n        data: mockData\n      };\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get member by ID failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const member = members.find(m => m.id === parseInt(id));\n      if (!member) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      return {\n        data: member\n      };\n    }\n  },\n  create: async memberData => {\n    try {\n      const response = await api.post('/members', memberData);\n\n      // Update localStorage with the new member\n      const members = loadMockData('members') || [];\n      members.push(response.data);\n      saveMockData('members', members);\n      return response;\n    } catch (error) {\n      console.warn('Create member failed, using mock data:', error);\n      const members = loadMockData('members') || [];\n      const newMember = {\n        id: members.length > 0 ? Math.max(...members.map(m => m.id)) + 1 : 1,\n        ...memberData,\n        role: memberData.role || 'USER',\n        active: true\n      };\n      members.push(newMember);\n      saveMockData('members', members);\n      return {\n        data: newMember\n      };\n    }\n  },\n  update: async (id, memberData) => {\n    try {\n      const response = await api.put(`/members/${id}`, memberData);\n      return response;\n    } catch (error) {\n      console.warn(`Update member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const index = members.findIndex(m => m.id === parseInt(id));\n      if (index === -1) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      members[index] = {\n        ...members[index],\n        ...memberData\n      };\n      saveMockData('members', members);\n      return {\n        data: members[index]\n      };\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const filteredMembers = members.filter(m => m.id !== parseInt(id));\n      saveMockData('members', filteredMembers);\n      return {\n        data: {\n          message: 'Member deleted successfully'\n        }\n      };\n    }\n  }\n};\n\n// Borrowings API\nexport const borrowingsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/borrowings');\n      // Update localStorage with the latest data from the server\n      saveMockData('borrowings', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for borrowings:`, error);\n      const mockData = loadMockData('borrowings');\n      if (!mockData) {\n        throw new Error(`No mock data available for borrowings`);\n      }\n      return {\n        data: mockData\n      };\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get borrowing by ID failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const borrowing = borrowings.find(b => b.id === parseInt(id));\n      if (!borrowing) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      return {\n        data: borrowing\n      };\n    }\n  },\n  create: async borrowingData => {\n    try {\n      const response = await api.post('/borrowings', borrowingData);\n      return response;\n    } catch (error) {\n      console.warn('Create borrowing failed, using mock data:', error);\n      const borrowings = loadMockData('borrowings') || [];\n      const newBorrowing = {\n        id: borrowings.length > 0 ? Math.max(...borrowings.map(b => b.id)) + 1 : 1,\n        ...borrowingData,\n        returned: false\n      };\n      borrowings.push(newBorrowing);\n      saveMockData('borrowings', borrowings);\n      return {\n        data: newBorrowing\n      };\n    }\n  },\n  update: async (id, borrowingData) => {\n    try {\n      const response = await api.put(`/borrowings/${id}`, borrowingData);\n      return response;\n    } catch (error) {\n      console.warn(`Update borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const index = borrowings.findIndex(b => b.id === parseInt(id));\n      if (index === -1) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      borrowings[index] = {\n        ...borrowings[index],\n        ...borrowingData\n      };\n      saveMockData('borrowings', borrowings);\n      return {\n        data: borrowings[index]\n      };\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const filteredBorrowings = borrowings.filter(b => b.id !== parseInt(id));\n      saveMockData('borrowings', filteredBorrowings);\n      return {\n        data: {\n          message: 'Borrowing deleted successfully'\n        }\n      };\n    }\n  }\n};\n\n// Stats API\nexport const statsAPI = {\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/stats/dashboard');\n      return response;\n    } catch (error) {\n      console.warn('Stats API call failed, generating mock stats:', error);\n\n      // Generate mock stats based on books, members, and borrowings data\n      const books = loadMockData('books') || [];\n      const members = loadMockData('members') || [];\n      const borrowings = loadMockData('borrowings') || [];\n      const today = new Date();\n      const activeBorrowings = borrowings.filter(b => !b.returned);\n      const overdueBorrowings = activeBorrowings.filter(b => new Date(b.dueDate) < today);\n      const mockStats = {\n        totalBooks: books.length,\n        totalMembers: members.length,\n        totalBorrowings: borrowings.length,\n        activeBorrowings: activeBorrowings.length,\n        overdueBorrowings: overdueBorrowings.length\n      };\n      return {\n        data: mockStats\n      };\n    }\n  },\n  getBookStats: async () => {\n    try {\n      const response = await api.get('/stats/books');\n      return response;\n    } catch (error) {\n      console.warn('Book stats API call failed, using mock data:', error);\n      return {\n        data: loadMockData('books') || []\n      };\n    }\n  },\n  getMemberStats: async () => {\n    try {\n      const response = await api.get('/stats/members');\n      return response;\n    } catch (error) {\n      console.warn('Member stats API call failed, using mock data:', error);\n      return {\n        data: loadMockData('members') || []\n      };\n    }\n  },\n  getBorrowingStats: async () => {\n    try {\n      const response = await api.get('/stats/borrowings');\n      return response;\n    } catch (error) {\n      console.warn('Borrowing stats API call failed, using mock data:', error);\n      return {\n        data: loadMockData('borrowings') || []\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","initialMockData","books","id","title","author","isbn","publisher","publicationYear","quantity","availableQuantity","members","name","email","phoneNumber","address","role","active","membershipStartDate","membershipEndDate","maxAllowedBooks","maxAllowedDays","borrowings","bookId","memberId","borrowDate","dueDate","returned","bookTitle","memberName","returnDate","fineAmount","initializeMockData","localStorage","getItem","setItem","JSON","stringify","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","message","removeItem","window","location","href","loadMockData","key","parse","saveMockData","withMockFallback","apiCall","mockDataKey","warn","mockData","Error","authAPI","login","credentials","post","user","find","m","mockToken","Date","now","accessToken","register","userData","newUser","length","toISOString","split","setFullYear","getFullYear","push","getCurrentUser","get","adminUser","booksAPI","getAll","getById","book","b","parseInt","bookData","newBook","Math","max","map","update","put","index","findIndex","delete","filteredBooks","filter","membersAPI","member","memberData","newMember","filteredMembers","borrowingsAPI","borrowing","borrowingData","newBorrowing","filteredBorrowings","statsAPI","getDashboardStats","today","activeBorrowings","overdueBorrowings","mockStats","totalBooks","totalMembers","totalBorrowings","getBookStats","getMemberStats","getBorrowingStats"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Mock data for initial state\nconst initialMockData = {\n  books: [\n    { id: 1, title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', isbn: '9780743273565', publisher: 'Scribner', publicationYear: 1925, quantity: 5, availableQuantity: 3 },\n    { id: 2, title: 'To Kill a Mockingbird', author: 'Harper Lee', isbn: '9780061120084', publisher: 'HarperCollins', publicationYear: 1960, quantity: 8, availableQuantity: 6 },\n    { id: 3, title: '1984', author: 'George Orwell', isbn: '9780451524935', publisher: 'Signet Classic', publicationYear: 1949, quantity: 10, availableQuantity: 7 }\n  ],\n  members: [\n    { id: 1, name: 'John Doe', email: 'john@example.com', phoneNumber: '1234567890', address: '123 Main St', role: 'USER', active: true, membershipStartDate: '2023-01-01', membershipEndDate: '2024-01-01', maxAllowedBooks: 5, maxAllowedDays: 14 },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', phoneNumber: '0987654321', address: '456 Oak Ave', role: 'USER', active: true, membershipStartDate: '2023-02-15', membershipEndDate: '2024-02-15', maxAllowedBooks: 3, maxAllowedDays: 10 },\n    { id: 3, name: 'Admin User', email: 'admin@example.com', phoneNumber: '5555555555', address: '789 Admin Blvd', role: 'ADMIN', active: true, membershipStartDate: '2023-01-01', membershipEndDate: '2025-01-01', maxAllowedBooks: 10, maxAllowedDays: 30 }\n  ],\n  borrowings: [\n    { id: 1, bookId: 1, memberId: 1, borrowDate: '2023-05-01', dueDate: '2023-05-15', returned: false, bookTitle: 'The Great Gatsby', memberName: 'John Doe' },\n    { id: 2, bookId: 2, memberId: 2, borrowDate: '2023-04-15', dueDate: '2023-04-25', returned: true, returnDate: '2023-04-23', fineAmount: 0, bookTitle: 'To Kill a Mockingbird', memberName: 'Jane Smith' },\n    { id: 3, bookId: 3, memberId: 1, borrowDate: '2023-05-10', dueDate: '2023-05-24', returned: false, bookTitle: '1984', memberName: 'John Doe' }\n  ]\n};\n\n// Initialize localStorage with mock data if it doesn't exist\nconst initializeMockData = () => {\n  if (!localStorage.getItem('books')) {\n    localStorage.setItem('books', JSON.stringify(initialMockData.books));\n  }\n  if (!localStorage.getItem('members')) {\n    localStorage.setItem('members', JSON.stringify(initialMockData.members));\n  }\n  if (!localStorage.getItem('borrowings')) {\n    localStorage.setItem('borrowings', JSON.stringify(initialMockData.borrowings));\n  }\n};\n\n// Initialize mock data\ninitializeMockData();\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8081/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 5000, // Increase timeout to 5 seconds\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', response.status, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.status, error.response?.data || error.message);\n    \n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Helper function to load mock data from localStorage\nconst loadMockData = (key) => {\n  try {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error(`Error loading mock ${key}:`, error);\n    return null;\n  }\n};\n\n// Helper function to save mock data to localStorage\nconst saveMockData = (key, data) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n    console.log(`Saved ${key} to localStorage:`, data);\n  } catch (error) {\n    console.error(`Error saving mock ${key}:`, error);\n  }\n};\n\n// Helper function to handle API fallback to mock data\nconst withMockFallback = async (apiCall, mockDataKey) => {\n  try {\n    const response = await apiCall();\n    return response;\n  } catch (error) {\n    console.warn(`API call failed, using mock data for ${mockDataKey}:`, error);\n    const mockData = loadMockData(mockDataKey);\n    \n    if (!mockData) {\n      throw new Error(`No mock data available for ${mockDataKey}`);\n    }\n    \n    return { data: mockData };\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response;\n    } catch (error) {\n      console.warn('Login failed, using mock authentication:', error);\n      \n      // Check against mock users\n      const members = loadMockData('members');\n      const user = members.find(m => m.email === credentials.email);\n      \n      if (user) {\n        // Mock successful login\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        localStorage.setItem('token', mockToken);\n        \n        return { \n          data: { \n            accessToken: mockToken,\n            user: user\n          } \n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    }\n  },\n  register: async (userData) => {\n    try {\n      const response = await api.post('/auth/signup', userData);\n      return response;\n    } catch (error) {\n      console.warn('Registration failed, using mock registration:', error);\n      \n      // Add to mock members\n      const members = loadMockData('members');\n      const newUser = {\n        id: members.length + 1,\n        ...userData,\n        role: 'USER',\n        active: true,\n        membershipStartDate: new Date().toISOString().split('T')[0],\n        membershipEndDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        maxAllowedBooks: 5,\n        maxAllowedDays: 14\n      };\n      \n      members.push(newUser);\n      saveMockData('members', members);\n      \n      return { data: newUser };\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response;\n    } catch (error) {\n      console.warn('Get current user failed, using mock user:', error);\n      \n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      \n      // Return the admin user as the current user\n      const members = loadMockData('members');\n      const adminUser = members.find(m => m.role === 'ADMIN');\n      \n      if (adminUser) {\n        return { data: adminUser };\n      } else {\n        throw new Error('No admin user found in mock data');\n      }\n    }\n  },\n};\n\n// Books API\nexport const booksAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/books');\n      // Update localStorage with the latest data from the server\n      saveMockData('books', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for books:`, error);\n      const mockData = loadMockData('books');\n      \n      if (!mockData) {\n        throw new Error(`No mock data available for books`);\n      }\n      \n      return { data: mockData };\n    }\n  },\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get book by ID failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const book = books.find(b => b.id === parseInt(id));\n      \n      if (!book) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      \n      return { data: book };\n    }\n  },\n  create: async (bookData) => {\n    try {\n      const response = await api.post('/books', bookData);\n      \n      // Update localStorage with the new book\n      const books = loadMockData('books') || [];\n      books.push(response.data);\n      saveMockData('books', books);\n      \n      return response.data;\n    } catch (error) {\n      console.warn('Create book failed, using mock data:', error);\n      const books = loadMockData('books') || [];\n      const newBook = {\n        id: books.length > 0 ? Math.max(...books.map(b => b.id)) + 1 : 1,\n        ...bookData,\n        availableQuantity: bookData.quantity\n      };\n      \n      books.push(newBook);\n      saveMockData('books', books);\n      \n      return newBook;\n    }\n  },\n  update: async (id, bookData) => {\n    try {\n      const response = await api.put(`/books/${id}`, bookData);\n      return response.data;\n    } catch (error) {\n      console.warn(`Update book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const index = books.findIndex(b => b.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      \n      books[index] = { ...books[index], ...bookData };\n      saveMockData('books', books);\n      \n      return books[index];\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/books/${id}`);\n      return response.data;\n    } catch (error) {\n      console.warn(`Delete book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const filteredBooks = books.filter(b => b.id !== parseInt(id));\n      \n      saveMockData('books', filteredBooks);\n      \n      return { message: 'Book deleted successfully' };\n    }\n  },\n};\n\n// Members API\nexport const membersAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/members');\n      // Update localStorage with the latest data from the server\n      saveMockData('members', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for members:`, error);\n      const mockData = loadMockData('members');\n      \n      if (!mockData) {\n        throw new Error(`No mock data available for members`);\n      }\n      \n      return { data: mockData };\n    }\n  },\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get member by ID failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const member = members.find(m => m.id === parseInt(id));\n      \n      if (!member) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      \n      return { data: member };\n    }\n  },\n  create: async (memberData) => {\n    try {\n      const response = await api.post('/members', memberData);\n      \n      // Update localStorage with the new member\n      const members = loadMockData('members') || [];\n      members.push(response.data);\n      saveMockData('members', members);\n      \n      return response;\n    } catch (error) {\n      console.warn('Create member failed, using mock data:', error);\n      const members = loadMockData('members') || [];\n      const newMember = {\n        id: members.length > 0 ? Math.max(...members.map(m => m.id)) + 1 : 1,\n        ...memberData,\n        role: memberData.role || 'USER',\n        active: true\n      };\n      \n      members.push(newMember);\n      saveMockData('members', members);\n      \n      return { data: newMember };\n    }\n  },\n  update: async (id, memberData) => {\n    try {\n      const response = await api.put(`/members/${id}`, memberData);\n      return response;\n    } catch (error) {\n      console.warn(`Update member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const index = members.findIndex(m => m.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      \n      members[index] = { ...members[index], ...memberData };\n      saveMockData('members', members);\n      \n      return { data: members[index] };\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const filteredMembers = members.filter(m => m.id !== parseInt(id));\n      \n      saveMockData('members', filteredMembers);\n      \n      return { data: { message: 'Member deleted successfully' } };\n    }\n  },\n};\n\n// Borrowings API\nexport const borrowingsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/borrowings');\n      // Update localStorage with the latest data from the server\n      saveMockData('borrowings', response.data);\n      return response;\n    } catch (error) {\n      console.warn(`API call failed, using mock data for borrowings:`, error);\n      const mockData = loadMockData('borrowings');\n      \n      if (!mockData) {\n        throw new Error(`No mock data available for borrowings`);\n      }\n      \n      return { data: mockData };\n    }\n  },\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get borrowing by ID failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const borrowing = borrowings.find(b => b.id === parseInt(id));\n      \n      if (!borrowing) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      \n      return { data: borrowing };\n    }\n  },\n  create: async (borrowingData) => {\n    try {\n      const response = await api.post('/borrowings', borrowingData);\n      return response;\n    } catch (error) {\n      console.warn('Create borrowing failed, using mock data:', error);\n      const borrowings = loadMockData('borrowings') || [];\n      const newBorrowing = {\n        id: borrowings.length > 0 ? Math.max(...borrowings.map(b => b.id)) + 1 : 1,\n        ...borrowingData,\n        returned: false\n      };\n      \n      borrowings.push(newBorrowing);\n      saveMockData('borrowings', borrowings);\n      \n      return { data: newBorrowing };\n    }\n  },\n  update: async (id, borrowingData) => {\n    try {\n      const response = await api.put(`/borrowings/${id}`, borrowingData);\n      return response;\n    } catch (error) {\n      console.warn(`Update borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const index = borrowings.findIndex(b => b.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      \n      borrowings[index] = { ...borrowings[index], ...borrowingData };\n      saveMockData('borrowings', borrowings);\n      \n      return { data: borrowings[index] };\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const filteredBorrowings = borrowings.filter(b => b.id !== parseInt(id));\n      \n      saveMockData('borrowings', filteredBorrowings);\n      \n      return { data: { message: 'Borrowing deleted successfully' } };\n    }\n  },\n};\n\n// Stats API\nexport const statsAPI = {\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/stats/dashboard');\n      return response;\n    } catch (error) {\n      console.warn('Stats API call failed, generating mock stats:', error);\n      \n      // Generate mock stats based on books, members, and borrowings data\n      const books = loadMockData('books') || [];\n      const members = loadMockData('members') || [];\n      const borrowings = loadMockData('borrowings') || [];\n      \n      const today = new Date();\n      const activeBorrowings = borrowings.filter(b => !b.returned);\n      const overdueBorrowings = activeBorrowings.filter(b => new Date(b.dueDate) < today);\n      \n      const mockStats = {\n        totalBooks: books.length,\n        totalMembers: members.length,\n        totalBorrowings: borrowings.length,\n        activeBorrowings: activeBorrowings.length,\n        overdueBorrowings: overdueBorrowings.length\n      };\n      \n      return { data: mockStats };\n    }\n  },\n  getBookStats: async () => {\n    try {\n      const response = await api.get('/stats/books');\n      return response;\n    } catch (error) {\n      console.warn('Book stats API call failed, using mock data:', error);\n      return { data: loadMockData('books') || [] };\n    }\n  },\n  getMemberStats: async () => {\n    try {\n      const response = await api.get('/stats/members');\n      return response;\n    } catch (error) {\n      console.warn('Member stats API call failed, using mock data:', error);\n      return { data: loadMockData('members') || [] };\n    }\n  },\n  getBorrowingStats: async () => {\n    try {\n      const response = await api.get('/stats/borrowings');\n      return response;\n    } catch (error) {\n      console.warn('Borrowing stats API call failed, using mock data:', error);\n      return { data: loadMockData('borrowings') || [] };\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}