{"ast":null,"code":"import axios from'axios';// Mock data for initial state\nconst initialMockData={books:[{id:1,title:'The Great Gatsby',author:'F. Scott Fitzgerald',isbn:'9780743273565',publisher:'Scribner',publicationYear:1925,quantity:5,availableQuantity:3},{id:2,title:'To Kill a Mockingbird',author:'Harper Lee',isbn:'9780061120084',publisher:'HarperCollins',publicationYear:1960,quantity:8,availableQuantity:6},{id:3,title:'1984',author:'George Orwell',isbn:'9780451524935',publisher:'Signet Classic',publicationYear:1949,quantity:10,availableQuantity:7}],members:[{id:1,name:'John Doe',email:'john@example.com',phoneNumber:'1234567890',address:'123 Main St',role:'USER',active:true,membershipStartDate:'2023-01-01',membershipEndDate:'2024-01-01',maxAllowedBooks:5,maxAllowedDays:14},{id:2,name:'Jane Smith',email:'jane@example.com',phoneNumber:'0987654321',address:'456 Oak Ave',role:'USER',active:true,membershipStartDate:'2023-02-15',membershipEndDate:'2024-02-15',maxAllowedBooks:3,maxAllowedDays:10},{id:3,name:'Admin User',email:'admin@example.com',phoneNumber:'5555555555',address:'789 Admin Blvd',role:'ADMIN',active:true,membershipStartDate:'2023-01-01',membershipEndDate:'2025-01-01',maxAllowedBooks:10,maxAllowedDays:30}],borrowings:[{id:1,bookId:1,memberId:1,borrowDate:'2023-05-01',dueDate:'2023-05-15',returned:false,bookTitle:'The Great Gatsby',memberName:'John Doe'},{id:2,bookId:2,memberId:2,borrowDate:'2023-04-15',dueDate:'2023-04-25',returned:true,returnDate:'2023-04-23',fineAmount:0,bookTitle:'To Kill a Mockingbird',memberName:'Jane Smith'},{id:3,bookId:3,memberId:1,borrowDate:'2023-05-10',dueDate:'2023-05-24',returned:false,bookTitle:'1984',memberName:'John Doe'}]};// Initialize localStorage with mock data if it doesn't exist\nconst initializeMockData=()=>{if(!localStorage.getItem('books')){localStorage.setItem('books',JSON.stringify(initialMockData.books));}if(!localStorage.getItem('members')){localStorage.setItem('members',JSON.stringify(initialMockData.members));}if(!localStorage.getItem('borrowings')){localStorage.setItem('borrowings',JSON.stringify(initialMockData.borrowings));}};// Initialize mock data\ninitializeMockData();// Create axios instance with base URL\nconst api=axios.create({baseURL:'http://localhost:8080/api',headers:{'Content-Type':'application/json'},timeout:5000// 5 second timeout\n});// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers['Authorization']=`Bearer ${token}`;}console.log('API Request:',config.method.toUpperCase(),config.url,config.data);return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});// Add a response interceptor to handle errors\napi.interceptors.response.use(response=>{console.log('API Response:',response.status,response.data);return response;},error=>{var _error$response,_error$response2;console.error('API Response Error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message);// Handle 401 Unauthorized errors\nif(error.response&&error.response.status===401){// Clear token and redirect to login\nlocalStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// Helper function to load mock data from localStorage\nconst loadMockData=key=>{try{const data=localStorage.getItem(key);return data?JSON.parse(data):null;}catch(error){console.error(`Error loading mock ${key}:`,error);return null;}};// Helper function to save mock data to localStorage\nconst saveMockData=(key,data)=>{try{localStorage.setItem(key,JSON.stringify(data));}catch(error){console.error(`Error saving mock ${key}:`,error);}};// Helper function to handle API fallback to mock data\nconst withMockFallback=async(apiCall,mockDataKey)=>{try{const response=await apiCall();return response;}catch(error){console.warn(`API call failed, using mock data for ${mockDataKey}:`,error);const mockData=loadMockData(mockDataKey);if(!mockData){throw new Error(`No mock data available for ${mockDataKey}`);}return{data:mockData};}};// Auth API\nexport const authAPI={login:async credentials=>{try{const response=await api.post('/auth/login',credentials);return response;}catch(error){console.warn('Login failed, using mock authentication:',error);// Check against mock users\nconst members=loadMockData('members');const user=members.find(m=>m.email===credentials.email);if(user){// Mock successful login\nconst mockToken='mock-jwt-token-'+Date.now();localStorage.setItem('token',mockToken);return{data:{accessToken:mockToken,user:user}};}else{throw new Error('Invalid credentials');}}},register:async userData=>{try{const response=await api.post('/auth/signup',userData);return response;}catch(error){console.warn('Registration failed, using mock registration:',error);// Add to mock members\nconst members=loadMockData('members');const newUser={id:members.length+1,...userData,role:'USER',active:true,membershipStartDate:new Date().toISOString().split('T')[0],membershipEndDate:new Date(new Date().setFullYear(new Date().getFullYear()+1)).toISOString().split('T')[0],maxAllowedBooks:5,maxAllowedDays:14};members.push(newUser);saveMockData('members',members);return{data:newUser};}},getCurrentUser:async()=>{try{const response=await api.get('/auth/me');return response;}catch(error){console.warn('Get current user failed, using mock user:',error);const token=localStorage.getItem('token');if(!token){throw new Error('No token found');}// Return the admin user as the current user\nconst members=loadMockData('members');const adminUser=members.find(m=>m.role==='ADMIN');if(adminUser){return{data:adminUser};}else{throw new Error('No admin user found in mock data');}}}};// Books API\nexport const booksAPI={getAll:()=>withMockFallback(()=>api.get('/books'),'books'),getById:async id=>{try{const response=await api.get(`/books/${id}`);return response;}catch(error){console.warn(`Get book by ID failed, using mock data:`,error);const books=loadMockData('books');const book=books.find(b=>b.id===parseInt(id));if(!book){throw new Error(`Book with ID ${id} not found`);}return{data:book};}},create:async bookData=>{try{const response=await api.post('/books',bookData);return response;}catch(error){console.warn('Create book failed, using mock data:',error);const books=loadMockData('books');const newBook={id:books.length+1,...bookData,availableQuantity:bookData.quantity};books.push(newBook);saveMockData('books',books);return{data:newBook};}},update:async(id,bookData)=>{try{const response=await api.put(`/books/${id}`,bookData);return response;}catch(error){console.warn(`Update book failed, using mock data:`,error);const books=loadMockData('books');const index=books.findIndex(b=>b.id===parseInt(id));if(index===-1){throw new Error(`Book with ID ${id} not found`);}books[index]={...books[index],...bookData};saveMockData('books',books);return{data:books[index]};}},delete:async id=>{try{const response=await api.delete(`/books/${id}`);return response;}catch(error){console.warn(`Delete book failed, using mock data:`,error);const books=loadMockData('books');const filteredBooks=books.filter(b=>b.id!==parseInt(id));saveMockData('books',filteredBooks);return{data:{message:'Book deleted successfully'}};}}};// Members API\nexport const membersAPI={getAll:()=>withMockFallback(()=>api.get('/members'),'members'),getById:async id=>{try{const response=await api.get(`/members/${id}`);return response;}catch(error){console.warn(`Get member by ID failed, using mock data:`,error);const members=loadMockData('members');const member=members.find(m=>m.id===parseInt(id));if(!member){throw new Error(`Member with ID ${id} not found`);}return{data:member};}},create:async memberData=>{try{const response=await api.post('/members',memberData);return response;}catch(error){console.warn('Create member failed, using mock data:',error);const members=loadMockData('members');const newMember={id:members.length+1,...memberData,role:memberData.role||'USER',active:true};members.push(newMember);saveMockData('members',members);return{data:newMember};}},update:async(id,memberData)=>{try{const response=await api.put(`/members/${id}`,memberData);return response;}catch(error){console.warn(`Update member failed, using mock data:`,error);const members=loadMockData('members');const index=members.findIndex(m=>m.id===parseInt(id));if(index===-1){throw new Error(`Member with ID ${id} not found`);}members[index]={...members[index],...memberData};saveMockData('members',members);return{data:members[index]};}},delete:async id=>{try{const response=await api.delete(`/members/${id}`);return response;}catch(error){console.warn(`Delete member failed, using mock data:`,error);const members=loadMockData('members');const filteredMembers=members.filter(m=>m.id!==parseInt(id));saveMockData('members',filteredMembers);return{data:{message:'Member deleted successfully'}};}}};// Borrowings API\nexport const borrowingsAPI={getAll:()=>withMockFallback(()=>api.get('/borrowings'),'borrowings'),getById:async id=>{try{const response=await api.get(`/borrowings/${id}`);return response;}catch(error){console.warn(`Get borrowing by ID failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const borrowing=borrowings.find(b=>b.id===parseInt(id));if(!borrowing){throw new Error(`Borrowing with ID ${id} not found`);}return{data:borrowing};}},create:async borrowingData=>{try{const response=await api.post('/borrowings',borrowingData);return response;}catch(error){console.warn('Create borrowing failed, using mock data:',error);const borrowings=loadMockData('borrowings');const books=loadMockData('books');const members=loadMockData('members');const book=books.find(b=>b.id===borrowingData.bookId);const member=members.find(m=>m.id===borrowingData.memberId);if(!book||!member){throw new Error('Book or member not found');}const newBorrowing={id:borrowings.length+1,...borrowingData,borrowDate:new Date().toISOString().split('T')[0],dueDate:new Date(new Date().setDate(new Date().getDate()+14)).toISOString().split('T')[0],returned:false,bookTitle:book.title,memberName:member.name};borrowings.push(newBorrowing);saveMockData('borrowings',borrowings);// Update book available quantity\nbook.availableQuantity-=1;const bookIndex=books.findIndex(b=>b.id===book.id);books[bookIndex]=book;saveMockData('books',books);return{data:newBorrowing};}},update:async(id,borrowingData)=>{try{const response=await api.put(`/borrowings/${id}`,borrowingData);return response;}catch(error){console.warn(`Update borrowing failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const index=borrowings.findIndex(b=>b.id===parseInt(id));if(index===-1){throw new Error(`Borrowing with ID ${id} not found`);}borrowings[index]={...borrowings[index],...borrowingData};saveMockData('borrowings',borrowings);return{data:borrowings[index]};}},returnBook:async(id,returnData)=>{try{const response=await api.put(`/borrowings/${id}/return`,returnData);return response;}catch(error){console.warn(`Return book failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const books=loadMockData('books');const index=borrowings.findIndex(b=>b.id===parseInt(id));if(index===-1){throw new Error(`Borrowing with ID ${id} not found`);}// Update borrowing\nborrowings[index]={...borrowings[index],returned:true,returnDate:new Date().toISOString().split('T')[0],fineAmount:0};saveMockData('borrowings',borrowings);// Update book available quantity\nconst book=books.find(b=>b.id===borrowings[index].bookId);if(book){book.availableQuantity+=1;const bookIndex=books.findIndex(b=>b.id===book.id);books[bookIndex]=book;saveMockData('books',books);}return{data:borrowings[index]};}},delete:async id=>{try{const response=await api.delete(`/borrowings/${id}`);return response;}catch(error){console.warn(`Delete borrowing failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const filteredBorrowings=borrowings.filter(b=>b.id!==parseInt(id));saveMockData('borrowings',filteredBorrowings);return{data:{message:'Borrowing deleted successfully'}};}},getByMember:async memberId=>{try{const response=await api.get(`/borrowings/member/${memberId}`);return response;}catch(error){console.warn(`Get borrowings by member failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const memberBorrowings=borrowings.filter(b=>b.memberId===parseInt(memberId));return{data:memberBorrowings};}},getByBook:async bookId=>{try{const response=await api.get(`/borrowings/book/${bookId}`);return response;}catch(error){console.warn(`Get borrowings by book failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const bookBorrowings=borrowings.filter(b=>b.bookId===parseInt(bookId));return{data:bookBorrowings};}},getActive:async()=>{try{const response=await api.get('/borrowings/active');return response;}catch(error){console.warn(`Get active borrowings failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const activeBorrowings=borrowings.filter(b=>!b.returned);return{data:activeBorrowings};}},getOverdue:async()=>{try{const response=await api.get('/borrowings/overdue');return response;}catch(error){console.warn(`Get overdue borrowings failed, using mock data:`,error);const borrowings=loadMockData('borrowings');const today=new Date();const overdueBorrowings=borrowings.filter(b=>!b.returned&&new Date(b.dueDate)<today);return{data:overdueBorrowings};}}};// Stats API\nexport const statsAPI={getDashboardStats:async()=>{try{const response=await api.get('/stats/dashboard');return response;}catch(error){console.warn('Stats API call failed, generating mock stats:',error);// Generate mock stats based on books, members, and borrowings data\nconst books=loadMockData('books')||[];const members=loadMockData('members')||[];const borrowings=loadMockData('borrowings')||[];const today=new Date();const activeBorrowings=borrowings.filter(b=>!b.returned);const overdueBorrowings=activeBorrowings.filter(b=>new Date(b.dueDate)<today);const mockStats={totalBooks:books.length,totalMembers:members.length,totalBorrowings:borrowings.length,activeBorrowings:activeBorrowings.length,overdueBorrowings:overdueBorrowings.length};return{data:mockStats};}},getBookStats:()=>withMockFallback(()=>api.get('/stats/books'),'books'),getMemberStats:()=>withMockFallback(()=>api.get('/stats/members'),'members'),getBorrowingStats:()=>withMockFallback(()=>api.get('/stats/borrowings'),'borrowings')};export default api;","map":{"version":3,"names":["axios","initialMockData","books","id","title","author","isbn","publisher","publicationYear","quantity","availableQuantity","members","name","email","phoneNumber","address","role","active","membershipStartDate","membershipEndDate","maxAllowedBooks","maxAllowedDays","borrowings","bookId","memberId","borrowDate","dueDate","returned","bookTitle","memberName","returnDate","fineAmount","initializeMockData","localStorage","getItem","setItem","JSON","stringify","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","message","removeItem","window","location","href","loadMockData","key","parse","saveMockData","withMockFallback","apiCall","mockDataKey","warn","mockData","Error","authAPI","login","credentials","post","user","find","m","mockToken","Date","now","accessToken","register","userData","newUser","length","toISOString","split","setFullYear","getFullYear","push","getCurrentUser","get","adminUser","booksAPI","getAll","getById","book","b","parseInt","bookData","newBook","update","put","index","findIndex","delete","filteredBooks","filter","membersAPI","member","memberData","newMember","filteredMembers","borrowingsAPI","borrowing","borrowingData","newBorrowing","setDate","getDate","bookIndex","returnBook","returnData","filteredBorrowings","getByMember","memberBorrowings","getByBook","bookBorrowings","getActive","activeBorrowings","getOverdue","today","overdueBorrowings","statsAPI","getDashboardStats","mockStats","totalBooks","totalMembers","totalBorrowings","getBookStats","getMemberStats","getBorrowingStats"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Mock data for initial state\nconst initialMockData = {\n  books: [\n    { id: 1, title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', isbn: '9780743273565', publisher: 'Scribner', publicationYear: 1925, quantity: 5, availableQuantity: 3 },\n    { id: 2, title: 'To Kill a Mockingbird', author: 'Harper Lee', isbn: '9780061120084', publisher: 'HarperCollins', publicationYear: 1960, quantity: 8, availableQuantity: 6 },\n    { id: 3, title: '1984', author: 'George Orwell', isbn: '9780451524935', publisher: 'Signet Classic', publicationYear: 1949, quantity: 10, availableQuantity: 7 }\n  ],\n  members: [\n    { id: 1, name: 'John Doe', email: 'john@example.com', phoneNumber: '1234567890', address: '123 Main St', role: 'USER', active: true, membershipStartDate: '2023-01-01', membershipEndDate: '2024-01-01', maxAllowedBooks: 5, maxAllowedDays: 14 },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', phoneNumber: '0987654321', address: '456 Oak Ave', role: 'USER', active: true, membershipStartDate: '2023-02-15', membershipEndDate: '2024-02-15', maxAllowedBooks: 3, maxAllowedDays: 10 },\n    { id: 3, name: 'Admin User', email: 'admin@example.com', phoneNumber: '5555555555', address: '789 Admin Blvd', role: 'ADMIN', active: true, membershipStartDate: '2023-01-01', membershipEndDate: '2025-01-01', maxAllowedBooks: 10, maxAllowedDays: 30 }\n  ],\n  borrowings: [\n    { id: 1, bookId: 1, memberId: 1, borrowDate: '2023-05-01', dueDate: '2023-05-15', returned: false, bookTitle: 'The Great Gatsby', memberName: 'John Doe' },\n    { id: 2, bookId: 2, memberId: 2, borrowDate: '2023-04-15', dueDate: '2023-04-25', returned: true, returnDate: '2023-04-23', fineAmount: 0, bookTitle: 'To Kill a Mockingbird', memberName: 'Jane Smith' },\n    { id: 3, bookId: 3, memberId: 1, borrowDate: '2023-05-10', dueDate: '2023-05-24', returned: false, bookTitle: '1984', memberName: 'John Doe' }\n  ]\n};\n\n// Initialize localStorage with mock data if it doesn't exist\nconst initializeMockData = () => {\n  if (!localStorage.getItem('books')) {\n    localStorage.setItem('books', JSON.stringify(initialMockData.books));\n  }\n  if (!localStorage.getItem('members')) {\n    localStorage.setItem('members', JSON.stringify(initialMockData.members));\n  }\n  if (!localStorage.getItem('borrowings')) {\n    localStorage.setItem('borrowings', JSON.stringify(initialMockData.borrowings));\n  }\n};\n\n// Initialize mock data\ninitializeMockData();\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 5000, // 5 second timeout\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', response.status, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.status, error.response?.data || error.message);\n    \n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Helper function to load mock data from localStorage\nconst loadMockData = (key) => {\n  try {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error(`Error loading mock ${key}:`, error);\n    return null;\n  }\n};\n\n// Helper function to save mock data to localStorage\nconst saveMockData = (key, data) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch (error) {\n    console.error(`Error saving mock ${key}:`, error);\n  }\n};\n\n// Helper function to handle API fallback to mock data\nconst withMockFallback = async (apiCall, mockDataKey) => {\n  try {\n    const response = await apiCall();\n    return response;\n  } catch (error) {\n    console.warn(`API call failed, using mock data for ${mockDataKey}:`, error);\n    const mockData = loadMockData(mockDataKey);\n    \n    if (!mockData) {\n      throw new Error(`No mock data available for ${mockDataKey}`);\n    }\n    \n    return { data: mockData };\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response;\n    } catch (error) {\n      console.warn('Login failed, using mock authentication:', error);\n      \n      // Check against mock users\n      const members = loadMockData('members');\n      const user = members.find(m => m.email === credentials.email);\n      \n      if (user) {\n        // Mock successful login\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        localStorage.setItem('token', mockToken);\n        \n        return { \n          data: { \n            accessToken: mockToken,\n            user: user\n          } \n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    }\n  },\n  register: async (userData) => {\n    try {\n      const response = await api.post('/auth/signup', userData);\n      return response;\n    } catch (error) {\n      console.warn('Registration failed, using mock registration:', error);\n      \n      // Add to mock members\n      const members = loadMockData('members');\n      const newUser = {\n        id: members.length + 1,\n        ...userData,\n        role: 'USER',\n        active: true,\n        membershipStartDate: new Date().toISOString().split('T')[0],\n        membershipEndDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        maxAllowedBooks: 5,\n        maxAllowedDays: 14\n      };\n      \n      members.push(newUser);\n      saveMockData('members', members);\n      \n      return { data: newUser };\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response;\n    } catch (error) {\n      console.warn('Get current user failed, using mock user:', error);\n      \n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      \n      // Return the admin user as the current user\n      const members = loadMockData('members');\n      const adminUser = members.find(m => m.role === 'ADMIN');\n      \n      if (adminUser) {\n        return { data: adminUser };\n      } else {\n        throw new Error('No admin user found in mock data');\n      }\n    }\n  },\n};\n\n// Books API\nexport const booksAPI = {\n  getAll: () => withMockFallback(() => api.get('/books'), 'books'),\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get book by ID failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const book = books.find(b => b.id === parseInt(id));\n      \n      if (!book) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      \n      return { data: book };\n    }\n  },\n  create: async (bookData) => {\n    try {\n      const response = await api.post('/books', bookData);\n      return response;\n    } catch (error) {\n      console.warn('Create book failed, using mock data:', error);\n      const books = loadMockData('books');\n      const newBook = {\n        id: books.length + 1,\n        ...bookData,\n        availableQuantity: bookData.quantity\n      };\n      \n      books.push(newBook);\n      saveMockData('books', books);\n      \n      return { data: newBook };\n    }\n  },\n  update: async (id, bookData) => {\n    try {\n      const response = await api.put(`/books/${id}`, bookData);\n      return response;\n    } catch (error) {\n      console.warn(`Update book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const index = books.findIndex(b => b.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Book with ID ${id} not found`);\n      }\n      \n      books[index] = { ...books[index], ...bookData };\n      saveMockData('books', books);\n      \n      return { data: books[index] };\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete book failed, using mock data:`, error);\n      const books = loadMockData('books');\n      const filteredBooks = books.filter(b => b.id !== parseInt(id));\n      \n      saveMockData('books', filteredBooks);\n      \n      return { data: { message: 'Book deleted successfully' } };\n    }\n  },\n};\n\n// Members API\nexport const membersAPI = {\n  getAll: () => withMockFallback(() => api.get('/members'), 'members'),\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get member by ID failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const member = members.find(m => m.id === parseInt(id));\n      \n      if (!member) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      \n      return { data: member };\n    }\n  },\n  create: async (memberData) => {\n    try {\n      const response = await api.post('/members', memberData);\n      return response;\n    } catch (error) {\n      console.warn('Create member failed, using mock data:', error);\n      const members = loadMockData('members');\n      const newMember = {\n        id: members.length + 1,\n        ...memberData,\n        role: memberData.role || 'USER',\n        active: true\n      };\n      \n      members.push(newMember);\n      saveMockData('members', members);\n      \n      return { data: newMember };\n    }\n  },\n  update: async (id, memberData) => {\n    try {\n      const response = await api.put(`/members/${id}`, memberData);\n      return response;\n    } catch (error) {\n      console.warn(`Update member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const index = members.findIndex(m => m.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Member with ID ${id} not found`);\n      }\n      \n      members[index] = { ...members[index], ...memberData };\n      saveMockData('members', members);\n      \n      return { data: members[index] };\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete member failed, using mock data:`, error);\n      const members = loadMockData('members');\n      const filteredMembers = members.filter(m => m.id !== parseInt(id));\n      \n      saveMockData('members', filteredMembers);\n      \n      return { data: { message: 'Member deleted successfully' } };\n    }\n  },\n};\n\n// Borrowings API\nexport const borrowingsAPI = {\n  getAll: () => withMockFallback(() => api.get('/borrowings'), 'borrowings'),\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get borrowing by ID failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const borrowing = borrowings.find(b => b.id === parseInt(id));\n      \n      if (!borrowing) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      \n      return { data: borrowing };\n    }\n  },\n  create: async (borrowingData) => {\n    try {\n      const response = await api.post('/borrowings', borrowingData);\n      return response;\n    } catch (error) {\n      console.warn('Create borrowing failed, using mock data:', error);\n      const borrowings = loadMockData('borrowings');\n      const books = loadMockData('books');\n      const members = loadMockData('members');\n      \n      const book = books.find(b => b.id === borrowingData.bookId);\n      const member = members.find(m => m.id === borrowingData.memberId);\n      \n      if (!book || !member) {\n        throw new Error('Book or member not found');\n      }\n      \n      const newBorrowing = {\n        id: borrowings.length + 1,\n        ...borrowingData,\n        borrowDate: new Date().toISOString().split('T')[0],\n        dueDate: new Date(new Date().setDate(new Date().getDate() + 14)).toISOString().split('T')[0],\n        returned: false,\n        bookTitle: book.title,\n        memberName: member.name\n      };\n      \n      borrowings.push(newBorrowing);\n      saveMockData('borrowings', borrowings);\n      \n      // Update book available quantity\n      book.availableQuantity -= 1;\n      const bookIndex = books.findIndex(b => b.id === book.id);\n      books[bookIndex] = book;\n      saveMockData('books', books);\n      \n      return { data: newBorrowing };\n    }\n  },\n  update: async (id, borrowingData) => {\n    try {\n      const response = await api.put(`/borrowings/${id}`, borrowingData);\n      return response;\n    } catch (error) {\n      console.warn(`Update borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const index = borrowings.findIndex(b => b.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      \n      borrowings[index] = { ...borrowings[index], ...borrowingData };\n      saveMockData('borrowings', borrowings);\n      \n      return { data: borrowings[index] };\n    }\n  },\n  returnBook: async (id, returnData) => {\n    try {\n      const response = await api.put(`/borrowings/${id}/return`, returnData);\n      return response;\n    } catch (error) {\n      console.warn(`Return book failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const books = loadMockData('books');\n      \n      const index = borrowings.findIndex(b => b.id === parseInt(id));\n      \n      if (index === -1) {\n        throw new Error(`Borrowing with ID ${id} not found`);\n      }\n      \n      // Update borrowing\n      borrowings[index] = { \n        ...borrowings[index], \n        returned: true, \n        returnDate: new Date().toISOString().split('T')[0],\n        fineAmount: 0\n      };\n      saveMockData('borrowings', borrowings);\n      \n      // Update book available quantity\n      const book = books.find(b => b.id === borrowings[index].bookId);\n      if (book) {\n        book.availableQuantity += 1;\n        const bookIndex = books.findIndex(b => b.id === book.id);\n        books[bookIndex] = book;\n        saveMockData('books', books);\n      }\n      \n      return { data: borrowings[index] };\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/borrowings/${id}`);\n      return response;\n    } catch (error) {\n      console.warn(`Delete borrowing failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const filteredBorrowings = borrowings.filter(b => b.id !== parseInt(id));\n      \n      saveMockData('borrowings', filteredBorrowings);\n      \n      return { data: { message: 'Borrowing deleted successfully' } };\n    }\n  },\n  getByMember: async (memberId) => {\n    try {\n      const response = await api.get(`/borrowings/member/${memberId}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get borrowings by member failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const memberBorrowings = borrowings.filter(b => b.memberId === parseInt(memberId));\n      \n      return { data: memberBorrowings };\n    }\n  },\n  getByBook: async (bookId) => {\n    try {\n      const response = await api.get(`/borrowings/book/${bookId}`);\n      return response;\n    } catch (error) {\n      console.warn(`Get borrowings by book failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const bookBorrowings = borrowings.filter(b => b.bookId === parseInt(bookId));\n      \n      return { data: bookBorrowings };\n    }\n  },\n  getActive: async () => {\n    try {\n      const response = await api.get('/borrowings/active');\n      return response;\n    } catch (error) {\n      console.warn(`Get active borrowings failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const activeBorrowings = borrowings.filter(b => !b.returned);\n      \n      return { data: activeBorrowings };\n    }\n  },\n  getOverdue: async () => {\n    try {\n      const response = await api.get('/borrowings/overdue');\n      return response;\n    } catch (error) {\n      console.warn(`Get overdue borrowings failed, using mock data:`, error);\n      const borrowings = loadMockData('borrowings');\n      const today = new Date();\n      const overdueBorrowings = borrowings.filter(b => \n        !b.returned && new Date(b.dueDate) < today\n      );\n      \n      return { data: overdueBorrowings };\n    }\n  },\n};\n\n// Stats API\nexport const statsAPI = {\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/stats/dashboard');\n      return response;\n    } catch (error) {\n      console.warn('Stats API call failed, generating mock stats:', error);\n      \n      // Generate mock stats based on books, members, and borrowings data\n      const books = loadMockData('books') || [];\n      const members = loadMockData('members') || [];\n      const borrowings = loadMockData('borrowings') || [];\n      \n      const today = new Date();\n      const activeBorrowings = borrowings.filter(b => !b.returned);\n      const overdueBorrowings = activeBorrowings.filter(b => new Date(b.dueDate) < today);\n      \n      const mockStats = {\n        totalBooks: books.length,\n        totalMembers: members.length,\n        totalBorrowings: borrowings.length,\n        activeBorrowings: activeBorrowings.length,\n        overdueBorrowings: overdueBorrowings.length\n      };\n      \n      return { data: mockStats };\n    }\n  },\n  getBookStats: () => withMockFallback(() => api.get('/stats/books'), 'books'),\n  getMemberStats: () => withMockFallback(() => api.get('/stats/members'), 'members'),\n  getBorrowingStats: () => withMockFallback(() => api.get('/stats/borrowings'), 'borrowings'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}