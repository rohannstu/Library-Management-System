{"ast":null,"code":"var _jsxFileName = \"/home/rohan-sinha/Documents/Library Managemet System /frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOfflineMode, setIsOfflineMode] = useState(false);\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Get user info if token exists\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n\n    // Add event listeners for online/offline status\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check initial online status\n    setIsOfflineMode(!navigator.onLine);\n\n    // Cleanup event listeners\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  const handleOnline = () => {\n    console.log('App is online');\n    setIsOfflineMode(false);\n    // Optionally refresh data when coming back online\n    if (currentUser) {\n      fetchCurrentUser();\n    }\n  };\n  const handleOffline = () => {\n    console.log('App is offline');\n    setIsOfflineMode(true);\n    setError('You are currently offline. Using local data.');\n  };\n  const fetchCurrentUser = async () => {\n    try {\n      // Get user info from the backend\n      const response = await authAPI.getCurrentUser();\n      console.log('Current user data from API:', response.data);\n      setCurrentUser(response.data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching current user:', err);\n      if (!navigator.onLine) {\n        setError('You are offline. Using local data.');\n      } else {\n        setError('Failed to fetch user information. Using mock data instead.');\n      }\n\n      // Try to get mock user data\n      try {\n        const members = JSON.parse(localStorage.getItem('members')) || [];\n        const adminUser = members.find(m => m.role === 'ADMIN');\n        if (adminUser) {\n          console.log('Using mock admin user:', adminUser);\n          setCurrentUser(adminUser);\n        } else {\n          // Clear token if no mock user found\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      } catch (mockErr) {\n        console.error('Error getting mock user:', mockErr);\n        // Clear token if it's invalid\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      const {\n        accessToken,\n        user\n      } = response.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', accessToken);\n\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n\n      // Set current user directly from response if available\n      if (user) {\n        setCurrentUser(user);\n      } else {\n        // Fetch current user info if user not included in response\n        await fetchCurrentUser();\n      }\n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      if (!navigator.onLine) {\n        setError('You are offline. Please check your internet connection and try again.');\n      } else {\n        setError(err.message || 'Failed to login. Please check your credentials.');\n      }\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      await authAPI.register(userData);\n\n      // After successful registration, redirect to login page\n      // The user will need to log in with their credentials\n      return true;\n    } catch (err) {\n      console.error('Registration error:', err);\n      if (!navigator.onLine) {\n        setError('You are offline. Please check your internet connection and try again.');\n      } else {\n        setError(err.message || 'Failed to register. Please try again.');\n      }\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Clear user state\n    setCurrentUser(null);\n    setError(null);\n  };\n  const isAdmin = () => {\n    console.log('isAdmin check - currentUser:', currentUser);\n    const result = currentUser && currentUser.role === 'ADMIN';\n    console.log('isAdmin result:', result);\n    return result;\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isOfflineMode,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"tJjcC8FBaRLWiYjMV0NNjw45TqA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","authAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","isOfflineMode","setIsOfflineMode","token","localStorage","getItem","defaults","headers","common","fetchCurrentUser","window","addEventListener","handleOnline","handleOffline","navigator","onLine","removeEventListener","console","log","response","getCurrentUser","data","err","members","JSON","parse","adminUser","find","m","role","removeItem","mockErr","login","email","password","accessToken","user","setItem","message","register","userData","logout","isAdmin","result","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { authAPI } from '../services/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOfflineMode, setIsOfflineMode] = useState(false);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Get user info if token exists\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n\n    // Add event listeners for online/offline status\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    // Check initial online status\n    setIsOfflineMode(!navigator.onLine);\n\n    // Cleanup event listeners\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const handleOnline = () => {\n    console.log('App is online');\n    setIsOfflineMode(false);\n    // Optionally refresh data when coming back online\n    if (currentUser) {\n      fetchCurrentUser();\n    }\n  };\n\n  const handleOffline = () => {\n    console.log('App is offline');\n    setIsOfflineMode(true);\n    setError('You are currently offline. Using local data.');\n  };\n\n  const fetchCurrentUser = async () => {\n    try {\n      // Get user info from the backend\n      const response = await authAPI.getCurrentUser();\n      console.log('Current user data from API:', response.data);\n      setCurrentUser(response.data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching current user:', err);\n      \n      if (!navigator.onLine) {\n        setError('You are offline. Using local data.');\n      } else {\n        setError('Failed to fetch user information. Using mock data instead.');\n      }\n      \n      // Try to get mock user data\n      try {\n        const members = JSON.parse(localStorage.getItem('members')) || [];\n        const adminUser = members.find(m => m.role === 'ADMIN');\n        \n        if (adminUser) {\n          console.log('Using mock admin user:', adminUser);\n          setCurrentUser(adminUser);\n        } else {\n          // Clear token if no mock user found\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      } catch (mockErr) {\n        console.error('Error getting mock user:', mockErr);\n        // Clear token if it's invalid\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authAPI.login({ email, password });\n      const { accessToken, user } = response.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', accessToken);\n      \n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n      \n      // Set current user directly from response if available\n      if (user) {\n        setCurrentUser(user);\n      } else {\n        // Fetch current user info if user not included in response\n        await fetchCurrentUser();\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      \n      if (!navigator.onLine) {\n        setError('You are offline. Please check your internet connection and try again.');\n      } else {\n        setError(err.message || 'Failed to login. Please check your credentials.');\n      }\n      \n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await authAPI.register(userData);\n      \n      // After successful registration, redirect to login page\n      // The user will need to log in with their credentials\n      return true;\n    } catch (err) {\n      console.error('Registration error:', err);\n      \n      if (!navigator.onLine) {\n        setError('You are offline. Please check your internet connection and try again.');\n      } else {\n        setError(err.message || 'Failed to register. Please try again.');\n      }\n      \n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n    \n    // Clear user state\n    setCurrentUser(null);\n    setError(null);\n  };\n\n  const isAdmin = () => {\n    console.log('isAdmin check - currentUser:', currentUser);\n    const result = currentUser && currentUser.role === 'ADMIN';\n    console.log('isAdmin result:', result);\n    return result;\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isOfflineMode,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}