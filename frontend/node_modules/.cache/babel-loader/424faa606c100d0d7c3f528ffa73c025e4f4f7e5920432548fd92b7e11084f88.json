{"ast":null,"code":"var _jsxFileName = \"/home/rohan-sinha/Documents/Library Managemet System /frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Get user info if token exists\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchCurrentUser = async () => {\n    try {\n      // Get user info from the backend\n      const response = await authAPI.getCurrentUser();\n      console.log('Current user data from API:', response.data);\n      setCurrentUser(response.data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching current user:', err);\n      setError('Failed to fetch user information. Using mock data instead.');\n\n      // Try to get mock user data\n      try {\n        const members = JSON.parse(localStorage.getItem('members')) || [];\n        const adminUser = members.find(m => m.role === 'ADMIN');\n        if (adminUser) {\n          console.log('Using mock admin user:', adminUser);\n          setCurrentUser(adminUser);\n        } else {\n          // Clear token if no mock user found\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      } catch (mockErr) {\n        console.error('Error getting mock user:', mockErr);\n        // Clear token if it's invalid\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      const {\n        accessToken,\n        user\n      } = response.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', accessToken);\n\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n\n      // Set current user directly from response if available\n      if (user) {\n        setCurrentUser(user);\n      } else {\n        // Fetch current user info if user not included in response\n        await fetchCurrentUser();\n      }\n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message || 'Failed to login. Please check your credentials.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      await authAPI.register(userData);\n\n      // After successful registration, redirect to login page\n      // The user will need to log in with their credentials\n      return true;\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err.message || 'Failed to register. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Clear user state\n    setCurrentUser(null);\n    setError(null);\n  };\n  const isAdmin = () => {\n    console.log('isAdmin check - currentUser:', currentUser);\n    const result = currentUser && currentUser.role === 'ADMIN';\n    console.log('isAdmin result:', result);\n    return result;\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","authAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","token","localStorage","getItem","defaults","headers","common","fetchCurrentUser","response","getCurrentUser","console","log","data","err","members","JSON","parse","adminUser","find","m","role","removeItem","mockErr","login","email","password","accessToken","user","setItem","message","register","userData","logout","isAdmin","result","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { authAPI } from '../services/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Get user info if token exists\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchCurrentUser = async () => {\n    try {\n      // Get user info from the backend\n      const response = await authAPI.getCurrentUser();\n      console.log('Current user data from API:', response.data);\n      setCurrentUser(response.data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching current user:', err);\n      setError('Failed to fetch user information. Using mock data instead.');\n      \n      // Try to get mock user data\n      try {\n        const members = JSON.parse(localStorage.getItem('members')) || [];\n        const adminUser = members.find(m => m.role === 'ADMIN');\n        \n        if (adminUser) {\n          console.log('Using mock admin user:', adminUser);\n          setCurrentUser(adminUser);\n        } else {\n          // Clear token if no mock user found\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      } catch (mockErr) {\n        console.error('Error getting mock user:', mockErr);\n        // Clear token if it's invalid\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authAPI.login({ email, password });\n      const { accessToken, user } = response.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', accessToken);\n      \n      // Set the default Authorization header for all requests\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n      \n      // Set current user directly from response if available\n      if (user) {\n        setCurrentUser(user);\n      } else {\n        // Fetch current user info if user not included in response\n        await fetchCurrentUser();\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message || 'Failed to login. Please check your credentials.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await authAPI.register(userData);\n      \n      // After successful registration, redirect to login page\n      // The user will need to log in with their credentials\n      return true;\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err.message || 'Failed to register. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n    \n    // Clear user state\n    setCurrentUser(null);\n    setError(null);\n  };\n\n  const isAdmin = () => {\n    console.log('isAdmin check - currentUser:', currentUser);\n    const result = currentUser && currentUser.role === 'ADMIN';\n    console.log('isAdmin result:', result);\n    return result;\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}