{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    // Clear token and redirect to login\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Load mock data from localStorage or use defaults\nconst loadMockData = (key, defaultData) => {\n  try {\n    const storedData = localStorage.getItem(`mock_${key}`);\n    return storedData ? JSON.parse(storedData) : defaultData;\n  } catch (error) {\n    console.error(`Error loading mock ${key} data:`, error);\n    return defaultData;\n  }\n};\n\n// Save mock data to localStorage\nconst saveMockData = (key, data) => {\n  try {\n    localStorage.setItem(`mock_${key}`, JSON.stringify(data));\n  } catch (error) {\n    console.error(`Error saving mock ${key} data:`, error);\n  }\n};\n\n// Default mock data\nconst defaultMockBooks = [{\n  id: 1,\n  title: 'To Kill a Mockingbird',\n  author: 'Harper Lee',\n  isbn: '9780061120084',\n  publisher: 'HarperCollins',\n  publicationYear: 1960,\n  quantity: 5,\n  availableQuantity: 3\n}, {\n  id: 2,\n  title: '1984',\n  author: 'George Orwell',\n  isbn: '9780451524935',\n  publisher: 'Signet Classic',\n  publicationYear: 1949,\n  quantity: 7,\n  availableQuantity: 4\n}, {\n  id: 3,\n  title: 'The Great Gatsby',\n  author: 'F. Scott Fitzgerald',\n  isbn: '9780743273565',\n  publisher: 'Scribner',\n  publicationYear: 1925,\n  quantity: 4,\n  availableQuantity: 2\n}];\nconst defaultMockMembers = [{\n  id: 1,\n  name: 'John Doe',\n  email: 'john@example.com',\n  phoneNumber: '1234567890',\n  address: '123 Main St',\n  role: 'USER',\n  membershipStartDate: '2023-01-01',\n  membershipEndDate: '2024-01-01'\n}, {\n  id: 2,\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  phoneNumber: '0987654321',\n  address: '456 Oak Ave',\n  role: 'USER',\n  membershipStartDate: '2023-02-15',\n  membershipEndDate: '2024-02-15'\n}];\nconst defaultMockBorrowings = [{\n  id: 1,\n  bookId: 1,\n  bookTitle: 'To Kill a Mockingbird',\n  memberId: 1,\n  memberName: 'John Doe',\n  borrowDate: '2023-05-01',\n  dueDate: '2023-05-15',\n  returnDate: null,\n  returned: false,\n  fineAmount: 0\n}, {\n  id: 2,\n  bookId: 2,\n  bookTitle: '1984',\n  memberId: 2,\n  memberName: 'Jane Smith',\n  borrowDate: '2023-04-15',\n  dueDate: '2023-04-29',\n  returnDate: '2023-04-28',\n  returned: true,\n  fineAmount: 0\n}];\n\n// Initialize mock data from localStorage or defaults\nlet mockBooks = loadMockData('books', defaultMockBooks);\nlet mockMembers = loadMockData('members', defaultMockMembers);\nlet mockBorrowings = loadMockData('borrowings', defaultMockBorrowings);\n\n// Helper function to use mock data if API fails\nconst withMockFallback = (apiCall, mockDataKey) => {\n  return async (...args) => {\n    try {\n      return await apiCall(...args);\n    } catch (error) {\n      console.warn('Using mock data due to API error:', error.message);\n      // Always get the latest mock data from localStorage\n      const latestMockData = loadMockData(mockDataKey, mockDataKey === 'books' ? mockBooks : mockDataKey === 'members' ? mockMembers : mockBorrowings);\n      return {\n        data: latestMockData\n      };\n    }\n  };\n};\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/signup', userData)\n};\n\n// Books API\nexport const booksAPI = {\n  getAll: withMockFallback(() => api.get('/books'), 'books'),\n  getById: withMockFallback(id => api.get(`/books/${id}`), 'books'),\n  create: async bookData => {\n    try {\n      const response = await api.post('/books', bookData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book creation:', error.message);\n      // Create a new book with an ID and availableQuantity\n      const newBook = {\n        ...bookData,\n        id: mockBooks.length > 0 ? Math.max(...mockBooks.map(b => b.id)) + 1 : 1,\n        availableQuantity: bookData.quantity\n      };\n      // Add to mock books array\n      mockBooks.push(newBook);\n      // Save updated mock books to localStorage\n      saveMockData('books', mockBooks);\n      console.log('Updated mock books:', mockBooks);\n      return {\n        data: newBook\n      };\n    }\n  },\n  update: async (id, bookData) => {\n    try {\n      const response = await api.put(`/books/${id}`, bookData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book update:', error.message);\n      const index = mockBooks.findIndex(b => b.id === parseInt(id));\n      if (index !== -1) {\n        mockBooks[index] = {\n          ...bookData,\n          id: parseInt(id),\n          availableQuantity: bookData.quantity\n        };\n        // Save updated mock books to localStorage\n        saveMockData('books', mockBooks);\n        return {\n          data: mockBooks[index]\n        };\n      }\n      throw new Error('Book not found');\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book deletion:', error.message);\n      const index = mockBooks.findIndex(b => b.id === parseInt(id));\n      if (index !== -1) {\n        mockBooks.splice(index, 1);\n        // Save updated mock books to localStorage\n        saveMockData('books', mockBooks);\n        return {\n          data: {\n            message: 'Book deleted successfully'\n          }\n        };\n      }\n      throw new Error('Book not found');\n    }\n  }\n};\n\n// Members API\nexport const membersAPI = {\n  getAll: withMockFallback(() => api.get('/members'), 'members'),\n  getById: withMockFallback(id => api.get(`/members/${id}`), 'members'),\n  create: async memberData => {\n    try {\n      const response = await api.post('/members', memberData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member creation:', error.message);\n      const newMember = {\n        ...memberData,\n        id: mockMembers.length + 1,\n        membershipStartDate: memberData.membershipStartDate || new Date().toISOString().split('T')[0],\n        membershipEndDate: memberData.membershipEndDate || new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        active: true\n      };\n      mockMembers.push(newMember);\n      // Save updated mock members to localStorage\n      saveMockData('members', mockMembers);\n      return {\n        data: newMember\n      };\n    }\n  },\n  update: async (id, memberData) => {\n    try {\n      const response = await api.put(`/members/${id}`, memberData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member update:', error.message);\n      const index = mockMembers.findIndex(m => m.id === parseInt(id));\n      if (index !== -1) {\n        mockMembers[index] = {\n          ...memberData,\n          id: parseInt(id)\n        };\n        // Save updated mock members to localStorage\n        saveMockData('members', mockMembers);\n        return {\n          data: mockMembers[index]\n        };\n      }\n      throw new Error('Member not found');\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member deletion:', error.message);\n      const index = mockMembers.findIndex(m => m.id === parseInt(id));\n      if (index !== -1) {\n        mockMembers.splice(index, 1);\n        // Save updated mock members to localStorage\n        saveMockData('members', mockMembers);\n        return {\n          data: {\n            message: 'Member deleted successfully'\n          }\n        };\n      }\n      throw new Error('Member not found');\n    }\n  }\n};\n\n// Borrowings API\nexport const borrowingsAPI = {\n  getAll: withMockFallback(() => api.get('/borrowings'), 'borrowings'),\n  getById: withMockFallback(id => api.get(`/borrowings/${id}`), 'borrowings'),\n  create: async borrowingData => {\n    try {\n      const response = await api.post('/borrowings', borrowingData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for borrowing creation:', error.message);\n      const book = mockBooks.find(b => b.id === parseInt(borrowingData.bookId));\n      const member = mockMembers.find(m => m.id === parseInt(borrowingData.memberId));\n      if (book && member) {\n        const newBorrowing = {\n          id: mockBorrowings.length + 1,\n          bookId: book.id,\n          bookTitle: book.title,\n          memberId: member.id,\n          memberName: member.name,\n          borrowDate: borrowingData.borrowDate || new Date().toISOString().split('T')[0],\n          dueDate: borrowingData.dueDate,\n          returnDate: null,\n          returned: false,\n          fineAmount: 0\n        };\n        mockBorrowings.push(newBorrowing);\n        book.availableQuantity -= 1;\n        // Save updated mock borrowings and books to localStorage\n        saveMockData('borrowings', mockBorrowings);\n        saveMockData('books', mockBooks);\n        return {\n          data: newBorrowing\n        };\n      }\n      throw new Error('Book or member not found');\n    }\n  },\n  returnBook: async id => {\n    try {\n      const response = await api.put(`/borrowings/${id}/return`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for returning book:', error.message);\n      const borrowing = mockBorrowings.find(b => b.id === parseInt(id));\n      if (borrowing && !borrowing.returned) {\n        borrowing.returned = true;\n        borrowing.returnDate = new Date().toISOString().split('T')[0];\n        const book = mockBooks.find(b => b.id === borrowing.bookId);\n        if (book) {\n          book.availableQuantity += 1;\n        }\n\n        // Save updated mock borrowings and books to localStorage\n        saveMockData('borrowings', mockBorrowings);\n        saveMockData('books', mockBooks);\n        return {\n          data: borrowing\n        };\n      }\n      throw new Error('Borrowing not found or already returned');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","message","removeItem","window","location","href","loadMockData","key","defaultData","storedData","JSON","parse","saveMockData","setItem","stringify","defaultMockBooks","id","title","author","isbn","publisher","publicationYear","quantity","availableQuantity","defaultMockMembers","name","email","phoneNumber","address","role","membershipStartDate","membershipEndDate","defaultMockBorrowings","bookId","bookTitle","memberId","memberName","borrowDate","dueDate","returnDate","returned","fineAmount","mockBooks","mockMembers","mockBorrowings","withMockFallback","apiCall","mockDataKey","args","warn","latestMockData","authAPI","login","credentials","post","register","userData","booksAPI","getAll","get","getById","bookData","newBook","length","Math","max","map","b","push","update","put","index","findIndex","parseInt","Error","delete","splice","membersAPI","memberData","newMember","Date","toISOString","split","setFullYear","getFullYear","active","m","borrowingsAPI","borrowingData","book","find","member","newBorrowing","returnBook","borrowing"],"sources":["/home/rohan-sinha/Documents/Library Managemet System /frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', response.status, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.status, error.response?.data || error.message);\n    \n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Load mock data from localStorage or use defaults\nconst loadMockData = (key, defaultData) => {\n  try {\n    const storedData = localStorage.getItem(`mock_${key}`);\n    return storedData ? JSON.parse(storedData) : defaultData;\n  } catch (error) {\n    console.error(`Error loading mock ${key} data:`, error);\n    return defaultData;\n  }\n};\n\n// Save mock data to localStorage\nconst saveMockData = (key, data) => {\n  try {\n    localStorage.setItem(`mock_${key}`, JSON.stringify(data));\n  } catch (error) {\n    console.error(`Error saving mock ${key} data:`, error);\n  }\n};\n\n// Default mock data\nconst defaultMockBooks = [\n  { id: 1, title: 'To Kill a Mockingbird', author: 'Harper Lee', isbn: '9780061120084', publisher: 'HarperCollins', publicationYear: 1960, quantity: 5, availableQuantity: 3 },\n  { id: 2, title: '1984', author: 'George Orwell', isbn: '9780451524935', publisher: 'Signet Classic', publicationYear: 1949, quantity: 7, availableQuantity: 4 },\n  { id: 3, title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', isbn: '9780743273565', publisher: 'Scribner', publicationYear: 1925, quantity: 4, availableQuantity: 2 }\n];\n\nconst defaultMockMembers = [\n  { id: 1, name: 'John Doe', email: 'john@example.com', phoneNumber: '1234567890', address: '123 Main St', role: 'USER', membershipStartDate: '2023-01-01', membershipEndDate: '2024-01-01' },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com', phoneNumber: '0987654321', address: '456 Oak Ave', role: 'USER', membershipStartDate: '2023-02-15', membershipEndDate: '2024-02-15' }\n];\n\nconst defaultMockBorrowings = [\n  { id: 1, bookId: 1, bookTitle: 'To Kill a Mockingbird', memberId: 1, memberName: 'John Doe', borrowDate: '2023-05-01', dueDate: '2023-05-15', returnDate: null, returned: false, fineAmount: 0 },\n  { id: 2, bookId: 2, bookTitle: '1984', memberId: 2, memberName: 'Jane Smith', borrowDate: '2023-04-15', dueDate: '2023-04-29', returnDate: '2023-04-28', returned: true, fineAmount: 0 }\n];\n\n// Initialize mock data from localStorage or defaults\nlet mockBooks = loadMockData('books', defaultMockBooks);\nlet mockMembers = loadMockData('members', defaultMockMembers);\nlet mockBorrowings = loadMockData('borrowings', defaultMockBorrowings);\n\n// Helper function to use mock data if API fails\nconst withMockFallback = (apiCall, mockDataKey) => {\n  return async (...args) => {\n    try {\n      return await apiCall(...args);\n    } catch (error) {\n      console.warn('Using mock data due to API error:', error.message);\n      // Always get the latest mock data from localStorage\n      const latestMockData = loadMockData(mockDataKey, \n        mockDataKey === 'books' ? mockBooks : \n        mockDataKey === 'members' ? mockMembers : \n        mockBorrowings\n      );\n      return { data: latestMockData };\n    }\n  };\n};\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/signup', userData),\n};\n\n// Books API\nexport const booksAPI = {\n  getAll: withMockFallback(() => api.get('/books'), 'books'),\n  getById: withMockFallback((id) => api.get(`/books/${id}`), 'books'),\n  create: async (bookData) => {\n    try {\n      const response = await api.post('/books', bookData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book creation:', error.message);\n      // Create a new book with an ID and availableQuantity\n      const newBook = { \n        ...bookData, \n        id: mockBooks.length > 0 ? Math.max(...mockBooks.map(b => b.id)) + 1 : 1,\n        availableQuantity: bookData.quantity \n      };\n      // Add to mock books array\n      mockBooks.push(newBook);\n      // Save updated mock books to localStorage\n      saveMockData('books', mockBooks);\n      console.log('Updated mock books:', mockBooks);\n      return { data: newBook };\n    }\n  },\n  update: async (id, bookData) => {\n    try {\n      const response = await api.put(`/books/${id}`, bookData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book update:', error.message);\n      const index = mockBooks.findIndex(b => b.id === parseInt(id));\n      if (index !== -1) {\n        mockBooks[index] = { ...bookData, id: parseInt(id), availableQuantity: bookData.quantity };\n        // Save updated mock books to localStorage\n        saveMockData('books', mockBooks);\n        return { data: mockBooks[index] };\n      }\n      throw new Error('Book not found');\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/books/${id}`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for book deletion:', error.message);\n      const index = mockBooks.findIndex(b => b.id === parseInt(id));\n      if (index !== -1) {\n        mockBooks.splice(index, 1);\n        // Save updated mock books to localStorage\n        saveMockData('books', mockBooks);\n        return { data: { message: 'Book deleted successfully' } };\n      }\n      throw new Error('Book not found');\n    }\n  },\n};\n\n// Members API\nexport const membersAPI = {\n  getAll: withMockFallback(() => api.get('/members'), 'members'),\n  getById: withMockFallback((id) => api.get(`/members/${id}`), 'members'),\n  create: async (memberData) => {\n    try {\n      const response = await api.post('/members', memberData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member creation:', error.message);\n      const newMember = { \n        ...memberData, \n        id: mockMembers.length + 1,\n        membershipStartDate: memberData.membershipStartDate || new Date().toISOString().split('T')[0],\n        membershipEndDate: memberData.membershipEndDate || new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        active: true\n      };\n      mockMembers.push(newMember);\n      // Save updated mock members to localStorage\n      saveMockData('members', mockMembers);\n      return { data: newMember };\n    }\n  },\n  update: async (id, memberData) => {\n    try {\n      const response = await api.put(`/members/${id}`, memberData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member update:', error.message);\n      const index = mockMembers.findIndex(m => m.id === parseInt(id));\n      if (index !== -1) {\n        mockMembers[index] = { ...memberData, id: parseInt(id) };\n        // Save updated mock members to localStorage\n        saveMockData('members', mockMembers);\n        return { data: mockMembers[index] };\n      }\n      throw new Error('Member not found');\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/members/${id}`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for member deletion:', error.message);\n      const index = mockMembers.findIndex(m => m.id === parseInt(id));\n      if (index !== -1) {\n        mockMembers.splice(index, 1);\n        // Save updated mock members to localStorage\n        saveMockData('members', mockMembers);\n        return { data: { message: 'Member deleted successfully' } };\n      }\n      throw new Error('Member not found');\n    }\n  },\n};\n\n// Borrowings API\nexport const borrowingsAPI = {\n  getAll: withMockFallback(() => api.get('/borrowings'), 'borrowings'),\n  getById: withMockFallback((id) => api.get(`/borrowings/${id}`), 'borrowings'),\n  create: async (borrowingData) => {\n    try {\n      const response = await api.post('/borrowings', borrowingData);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for borrowing creation:', error.message);\n      const book = mockBooks.find(b => b.id === parseInt(borrowingData.bookId));\n      const member = mockMembers.find(m => m.id === parseInt(borrowingData.memberId));\n      \n      if (book && member) {\n        const newBorrowing = {\n          id: mockBorrowings.length + 1,\n          bookId: book.id,\n          bookTitle: book.title,\n          memberId: member.id,\n          memberName: member.name,\n          borrowDate: borrowingData.borrowDate || new Date().toISOString().split('T')[0],\n          dueDate: borrowingData.dueDate,\n          returnDate: null,\n          returned: false,\n          fineAmount: 0\n        };\n        \n        mockBorrowings.push(newBorrowing);\n        book.availableQuantity -= 1;\n        // Save updated mock borrowings and books to localStorage\n        saveMockData('borrowings', mockBorrowings);\n        saveMockData('books', mockBooks);\n        return { data: newBorrowing };\n      }\n      \n      throw new Error('Book or member not found');\n    }\n  },\n  returnBook: async (id) => {\n    try {\n      const response = await api.put(`/borrowings/${id}/return`);\n      return response;\n    } catch (error) {\n      console.warn('Using mock data for returning book:', error.message);\n      const borrowing = mockBorrowings.find(b => b.id === parseInt(id));\n      \n      if (borrowing && !borrowing.returned) {\n        borrowing.returned = true;\n        borrowing.returnDate = new Date().toISOString().split('T')[0];\n        \n        const book = mockBooks.find(b => b.id === borrowing.bookId);\n        if (book) {\n          book.availableQuantity += 1;\n        }\n        \n        // Save updated mock borrowings and books to localStorage\n        saveMockData('borrowings', mockBorrowings);\n        saveMockData('books', mockBooks);\n        return { data: borrowing };\n      }\n      \n      throw new Error('Borrowing not found or already returned');\n    }\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}